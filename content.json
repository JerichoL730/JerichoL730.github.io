{"pages":[],"posts":[{"title":"深入类","text":"类的构造方法在介绍之前首先对之前的示例进行一些改动，代码如下： 123456789class Myclass(object): i =123 def __init__(self,name): self.name = name def f(self): return 'hello,' + self.nameuse_class = Myclass('xiaomeng')print(f'调用类的属性：{use_class.i}')print(f'调用类的方法：{use_class.f()}') 程序的执行结果为：调用类的属性：123调用类的方法：hello,xiaomeng若类的实例化写法和之前一样，即：use_class = Myclass()则程序的执行结果为：Traceback (most recent call last): File “/Users/JerichoChen/PycharmProjects/HelloWorld/helloworld.py”, line 9, in use_class = Myclass()TypeError: init() missing 1 required positional argument: ‘name’错误的原因是因为在Python中，init()方法是一个特殊方法，在对象实例化时会被调用。一个类中可定义多个构造方法，但实例化类时至实例化最后的构造方法，即后面的构造方法会覆盖前面的构造方法，并且需要根据最后一个构造方法的形式进行实例化。在类内部有属性和方法，外部代码可以通过直接调用实例变量的方法操作数据，这样就隐藏了内部的复杂逻辑，例如： 123456789101112class student(object): def __init__(self,name,score): self.name=name self.score=score def info(self): print(f'学生: {self.name}; 分数: {self.score}')stu = student('xiaomeng',95)print(f'修改前分数: {stu.score}')stu.info()stu.score=0print(f'修改后分数:{stu.score}')stu.info() 程序执行结果如下：修改前分数: 95学生: xiaomeng; 分数: 95修改后分数:0学生: xiaomeng; 分数: 0由代码和输出结果看到，在类中定义的非构造方法可以调用类中构造方法实例变量的属性，调用的方式为self.实例变量属性名，如代码中的self.name和self.score。","link":"/2019/09/14/深入类/"},{"title":"类的定义与使用","text":"类的定义 类的一个示例(my_class.py)： 1234class Myclass(object): i =123 def f(self): return 'hello world' 由此可见，类的语法格式如下： 123456class ClassName(object): &lt;statement-1&gt; . . . &lt;statement-N&gt; Python中定义类使用class关键字，class后面紧接着类名，类名通常是大写开头的单词；紧接着是(object)，表示该类是从哪个类继承下来的。通常如果没有继承类，就使用object类，这是所有的类最终会继承的类。类包含属性和方法。 类的使用 如下的代码为例： 1234567class Myclass(object): i =123 def f(self): return 'hello world'use_class =Myclass()print(f'调用类的属性:{use_class.i}')print(f'调用类的方法:{use_class.f()}') 执行结果如下： 调用类的属性:123 调用类的方法:hello world 由输入代码中的调节方式可知，类的使用比函数调用多了几个操作，调用类时需要执行如下操作：use_class =Myclass()这一步叫做类的实例化，即创建一个类的实例。此处得到的use_class变量称为类的具体&gt;对象。再看后面两行的调用：print(f’调用类的属性:{use_class.i}’)print(f’调用类的方法:{use_class.f()}’) 这里第一行的use_class.i用于调用类的属性，也就是我们前面所说的类变量。第二行后&gt;的use_class.f()用于调用类的方法。 在类中定义方法时，第一个参数必须是self。除第一个参数外，类的方法和普通函数并没有什么区别。","link":"/2019/09/14/类的定义与使用/"},{"title":"面向对象编程","text":"理解面向对象 Python是一门面向对象的编程语言，对面向对象的语言编码的过程叫做面向对象编程。 面向对象编程是一种程序设计思想，把对象作为程序的基本单元，一个包含数据和操作数据的函数。 面向对象设计是把计算机程序视为一组对象的集合，每个对象都可以接受其他对象发来的消息，并处理这些消息，计算机程序的执行就是对象之间的消息传递。 在Python中，所以数据类型都被视为对象，也可以自定义对象。自定义对象数据类型就是面向对象中的类（Class）的概念。面向对象概念: (1) 类：用来描述具有相同属性和方法的对象的集合。类定义了集合中每个对象共有的属性和方法，对象是类的实例。例如，矿泉水和农夫山泉，农夫山泉就是矿泉水类的实例。 (2) 多态：对不同类的对象使用同样的操作。 (3) 封装：对外部世界隐藏对象的工作细节。 (4) 继承：即一个派生类(derived class)继承基类(base class)的字段和方法。继承允许把一个派生类的对象作为一个基类对象对待，已普通类为基础建立专门的类对象。 (5) 对象：通过类定义的数据结构实例。对象包括两个数据成员(类变量和实例变量)和方法。","link":"/2019/09/13/理解面向对象/"}],"tags":[{"name":"Python-类","slug":"Python-类","link":"/tags/Python-类/"},{"name":"Python-面向对象","slug":"Python-面向对象","link":"/tags/Python-面向对象/"}],"categories":[]}